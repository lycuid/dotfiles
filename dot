#!/bin/sh

USAGE="usage: $0 [option] src dest
options:
  link      sync with symlinks from 'src' dir to 'dest' dir.
  unlink    remove all 'src' dir symlinks from 'dest' dir."

trap '[ "$?" -ne 0 ] && echo "$USAGE"' EXIT

[ "$#" -lt 1 ] && exit 1

getRelativePath() {
  echo "$(cd $(dirname $1)/$(basename $1); pwd)"
}

query=$1
SRC=$(getRelativePath ${2:-.})
DEST=$(getRelativePath ${3:-$HOME})

DEFAULT="\033[0m"
GREEN="\033[92m"
YELLOW="\033[93m"
BLUE="\033[94m"

link() {
  paths=$(cd $SRC && find .[^\.]* -not -regex ".*\.git\/?.*")

  for path in $paths; do
    srcpath="$SRC/$path"
    destpath="$DEST/$path"

    if [ -f "$srcpath" ]; then
      echo -e "$GREEN[+] Linking: $path$DEFAULT"
      ln -rsf "$srcpath" "$destpath"
    else
      if [ -d "$destpath" ]; then
        echo -e "$YELLOW[?] Ignoring directory: $path$DEFAULT"
      else
        echo -e "$BLUE[+] Creating directory: $path$DEFAULT"
        mkdir "$destpath"
      fi
    fi
  done
}

unlink() {
  paths=$(cd $SRC && find .[^\.]* -not -regex ".*\.git\/?.*" | tac)

  for path in $paths; do
    destpath="$DEST/$path"
    if [ -f "$destpath" ]; then
      echo -e "$GREEN[+] Unlinking: $path$DEFAULT"
      rm "$destpath"
    fi
    if [ -d "$destpath" ] && [ $(ls "$destpath" | wc -l) -eq 0 ]; then
      echo -e "$YELLOW[+] Removing Empty Directory: $path$DEFAULT"
      rm -rf "$destpath"
    fi
  done
}

case $query in
  "link")   link   ;;
  "unlink") unlink ;;
  *)        exit 1 ;;
esac
