#!/bin/sh

USAGE="usage: $0 [option] src dst
options:
  link      sync with symlinks from 'src' dir to 'dst' dir.
  unlink    remove all 'src' dir symlinks from 'dst' dir."

trap '[ "$?" -ne 0 ] && echo "$USAGE"' EXIT

[ "$#" -lt 1 ] && exit 1

getRelativePath() {
  echo "$(cd $(dirname $1)/$(basename $1); pwd)"
}

query=$1
SRC=$(getRelativePath ${2:-.})
DST=$(getRelativePath ${3:-$HOME})

get_paths() {
  local paths=$(git -C $SRC ls-files --recurse-submodules | grep -E "^\." | grep -vE "^\.git*")
  echo "$paths"
}

DEFAULT="\033[0m"
GREEN="\033[92m"
YELLOW="\033[93m"
BLUE="\033[94m"

link() {
  for path in `get_paths`; do
    local srcpath="$SRC/$path"
    local dstpath="$DST/$path"

    local dstdir=$(dirname $dstpath)
    if [ ! -d $dstdir ]; then
      printf "$BLUE[+] Creating directory: $path$DEFAULT\n"
      mkdir -p "$dstdir"
    fi

    printf "$GREEN[+] Linking: $path$DEFAULT\n"
    ln -rsf "$srcpath" "$dstpath"
  done
}

unlink() {
  for path in `get_paths | tac`; do
    local dstpath="$DST/$path"

    if [ -f "$dstpath" ]; then
      printf "$GREEN[+] Unlinking: $path$DEFAULT\n"
      rm "$dstpath"
    fi

    dstpath=$(dirname $dstpath)
    while [ -d $dstpath ] && [ $(ls "$dstpath" | wc -l) -eq 0 ]; do
      printf "$YELLOW[+] Removing Empty Directory: $dstpath$DEFAULT\n"
      rm -rf "$dstpath"
      dstpath=$(dirname $dstpath)
    done
  done
}

case $query in
  "link")   link   ;;
  "unlink") unlink ;;
  *)        exit 1 ;;
esac
