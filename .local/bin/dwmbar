# vim: ft=sh

DWM_RUNTIME_DIR="$XDG_RUNTIME_DIR"/dwm
DWM_CACHE_DIR="$DWM_RUNTIME_DIR"/cache
DWMBAR="$DWM_RUNTIME_DIR"/dwmbar

mkdir -p "$DWM_CACHE_DIR" "$DWMBAR"

batsym=(               )
batsymlen=${#batsym[@]}

NET() {
  ACTIVE_INTERFACE=$(ip link | awk '/state\sUP/ {print substr($2,0,length($2)-1)}')
  [ -z "$ACTIVE_INTERFACE" ] && return 0

  prev_bytes="$DWM_CACHE_DIR"/network_bytes
  [ ! -f "$prev_bytes" ] && echo "0 0" > "$prev_bytes"

  read prx ptx < "$prev_bytes"
  rx="$(</sys/class/net/"$ACTIVE_INTERFACE"/statistics/rx_bytes)"
  tx="$(</sys/class/net/"$ACTIVE_INTERFACE"/statistics/tx_bytes)"

  echo "$rx $tx" > "$prev_bytes"

  echo "$ACTIVE_INTERFACE:  $(( (rx-prx) / 1024 )) KiB/s  $(( (tx-ptx) / 1024 )) KiB/s"
}

CPU() {
  prev_data="$DWM_CACHE_DIR"/cpu_data
  [ ! -f "$prev_data" ] && echo "0 0 0 0 0 0 0" > "$prev_data"

  read puser pnice psystem pidle piowait pirq psoftirq < "$prev_data"
  read user nnice system idle iowait irq softirq <<< $(head -n1 /proc/stat | cut -d\  -f3-9)

  newtotal=$(( user + nnice + system + idle + iowait + irq + softirq ))
  prevtotal=$(( puser + pnice + psystem + pidle + piowait + pirq + psoftirq ))
  total=$(( newtotal - prevtotal ))

  used=$(( (user + nnice + system) - (puser + pnice + psystem) ))
  echo "$user $nnice $system $idle $iowait $irq $softirq" > "$prev_data"

  printf "  %3s%%" $(( 100 * used / total ))
}

MEM() {
  free | awk '
    /Mem/ { c = ($3 + $5) / 1024 }
    END   {
      if (c >= 1000) {
        printf "  %.2f GiB", c/1024
      } else {
        printf "  %4d MiB", c
      }
    }'
}

SOUND() {
  cat "$DWMBAR"/volume
}

BAT() {
  batindexfile="$DWM_CACHE_DIR"/bat_symbol
  [ ! -f "$batindexfile" ] && echo "0" > "$batindexfile"

  read batindex < "$batindexfile"
  echo $(( (batindex + 1) % batsymlen)) > "$batindexfile"

  for BAT_DIR in /sys/class/power_supply/BAT*;
  do
    batcapacity=$(<"$BAT_DIR"/capacity)
    case $(<"$BAT_DIR"/status) in
      Charging)     batstatus="${batsym[$batindex]}  ";;
      Discharging)  batstatus="${batsym[$(( batcapacity * batsymlen / 100 ))]}  ";;
      *)            batstatus="${batsym[$(( batsymlen - 1))]}  ";;
    esac
    echo "$batstatus $batcapacity%  |  "
  done
}

DATETIME() {
  echo "$(date +'%a, %b %d %H:%M:%S')"
}

display_bar() {
  net=$(<"$DWMBAR"/net)
  cpu=$(<"$DWMBAR"/cpu)
  mem=$(<"$DWMBAR"/mem)
  vol=$(<"$DWMBAR"/vol)
  bat=$(<"$DWMBAR/"bat)
  datetime=$(DATETIME)

  xsetroot -name "  $net  |  $cpu  |  $mem  |  $vol  |  $bat$datetime"
}

# read volume from pipe and update the bar.
while true; do
  if read sound < "$XDG_RUNTIME_DIR"/pipe/volume; then
    echo "$sound" > "$DWMBAR"/vol
    $(display_bar)
  fi
done &

# main loop for updating the bar.
while true; do
  echo "$(NET)" > "$DWMBAR"/net
  echo "$(CPU)" > "$DWMBAR"/cpu
  echo "$(MEM)" > "$DWMBAR"/mem
  echo "$(BAT)" > "$DWMBAR"/bat
  $(display_bar)

  sleep 1
done
